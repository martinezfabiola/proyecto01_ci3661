{-|
Module : Pixels 

Description : program that receives a basic specification of the way in which 
text should be represented in theled, the result must be shown by screen on a 
String.

Authors:
- David Cabeza
- Fabiola Martínez 

Maintainer : 13-10191@usb.ve, 13-10838@usb.ve

Universidad Simón Bolívar
CI3661: Programming Languages I
First Project Haskell
-}

module Pixels (
    ) where

import Data.Char
import Data.List
import Data.String

type Pixels = [String]

-- | Converts an integer to its binary representation.
toBinary :: Int -> [Int]
toBinary 0 = []
toBinary x = [x `rem` 2] ++ toBinary (x `div` 2)

-- | Verify if a list contains seven elements.
verifyBinary :: [Int] -> [Int]
verifyBinary x = x ++ take (7-length x) (repeat 0) 

-- | Coonverts an hexadecimal list into bit list.
applyToBinary :: [Int] -> [[Int]]
applyToBinary letterBitMap  = 
    let applyVerifyBinary = map toBinary letterBitMap
    in map verifyBinary applyVerifyBinary

-- Contains an ascii bitmap.
fontBitmap :: [[Int]]
fontBitmap =
  [
    [ 0x00, 0x00, 0x00, 0x00, 0x00 ], --  (space)
    [ 0x00, 0x00, 0x5F, 0x00, 0x00 ], --  !
    [ 0x00, 0x07, 0x00, 0x07, 0x00 ], --  "
    [ 0x14, 0x7F, 0x14, 0x7F, 0x14 ], --  #
    [ 0x24, 0x2A, 0x7F, 0x2A, 0x12 ], --  $
    [ 0x23, 0x13, 0x08, 0x64, 0x62 ], --  %
    [ 0x36, 0x49, 0x55, 0x22, 0x50 ], --  &
    [ 0x00, 0x05, 0x03, 0x00, 0x00 ], --  '
    [ 0x00, 0x1C, 0x22, 0x41, 0x00 ], --  (
    [ 0x00, 0x41, 0x22, 0x1C, 0x00 ], --  )
    [ 0x08, 0x2A, 0x1C, 0x2A, 0x08 ], --  *
    [ 0x08, 0x08, 0x3E, 0x08, 0x08 ], --  +
    [ 0x00, 0x50, 0x30, 0x00, 0x00 ], --  ,
    [ 0x08, 0x08, 0x08, 0x08, 0x08 ], --  -
    [ 0x00, 0x60, 0x60, 0x00, 0x00 ], --  .
    [ 0x20, 0x10, 0x08, 0x04, 0x02 ], --  /
    [ 0x3E, 0x51, 0x49, 0x45, 0x3E ], --  0
    [ 0x00, 0x42, 0x7F, 0x40, 0x00 ], --  1
    [ 0x42, 0x61, 0x51, 0x49, 0x46 ], --  2
    [ 0x21, 0x41, 0x45, 0x4B, 0x31 ], --  3
    [ 0x18, 0x14, 0x12, 0x7F, 0x10 ], --  4
    [ 0x27, 0x45, 0x45, 0x45, 0x39 ], --  5
    [ 0x3C, 0x4A, 0x49, 0x49, 0x30 ], --  6
    [ 0x01, 0x71, 0x09, 0x05, 0x03 ], --  7
    [ 0x36, 0x49, 0x49, 0x49, 0x36 ], --  8
    [ 0x06, 0x49, 0x49, 0x29, 0x1E ], --  9
    [ 0x00, 0x36, 0x36, 0x00, 0x00 ], --  :
    [ 0x00, 0x56, 0x36, 0x00, 0x00 ], --  ;
    [ 0x00, 0x08, 0x14, 0x22, 0x41 ], --  <
    [ 0x14, 0x14, 0x14, 0x14, 0x14 ], --  =
    [ 0x41, 0x22, 0x14, 0x08, 0x00 ], --  >
    [ 0x02, 0x01, 0x51, 0x09, 0x06 ], --  ?
    [ 0x32, 0x49, 0x79, 0x41, 0x3E ], --  @
    [ 0x7E, 0x11, 0x11, 0x11, 0x7E ], --  A
    [ 0x7F, 0x49, 0x49, 0x49, 0x36 ], --  B
    [ 0x3E, 0x41, 0x41, 0x41, 0x22 ], --  C
    [ 0x7F, 0x41, 0x41, 0x22, 0x1C ], --  D
    [ 0x7F, 0x49, 0x49, 0x49, 0x41 ], --  E
    [ 0x7F, 0x09, 0x09, 0x01, 0x01 ], --  F
    [ 0x3E, 0x41, 0x41, 0x51, 0x32 ], --  G
    [ 0x7F, 0x08, 0x08, 0x08, 0x7F ], --  H
    [ 0x00, 0x41, 0x7F, 0x41, 0x00 ], --  I
    [ 0x20, 0x40, 0x41, 0x3F, 0x01 ], --  J
    [ 0x7F, 0x08, 0x14, 0x22, 0x41 ], --  K
    [ 0x7F, 0x40, 0x40, 0x40, 0x40 ], --  L
    [ 0x7F, 0x02, 0x04, 0x02, 0x7F ], --  M
    [ 0x7F, 0x04, 0x08, 0x10, 0x7F ], --  N
    [ 0x3E, 0x41, 0x41, 0x41, 0x3E ], --  O
    [ 0x7F, 0x09, 0x09, 0x09, 0x06 ], --  P
    [ 0x3E, 0x41, 0x51, 0x21, 0x5E ], --  Q
    [ 0x7F, 0x09, 0x19, 0x29, 0x46 ], --  R
    [ 0x46, 0x49, 0x49, 0x49, 0x31 ], --  S
    [ 0x01, 0x01, 0x7F, 0x01, 0x01 ], --  T
    [ 0x3F, 0x40, 0x40, 0x40, 0x3F ], --  U
    [ 0x1F, 0x20, 0x40, 0x20, 0x1F ], --  V
    [ 0x7F, 0x20, 0x18, 0x20, 0x7F ], --  W
    [ 0x63, 0x14, 0x08, 0x14, 0x63 ], --  X
    [ 0x03, 0x04, 0x78, 0x04, 0x03 ], --  Y
    [ 0x61, 0x51, 0x49, 0x45, 0x43 ], --  Z
    [ 0x00, 0x00, 0x7F, 0x41, 0x41 ], --  [
    [ 0x02, 0x04, 0x08, 0x10, 0x20 ], --  \
    [ 0x41, 0x41, 0x7F, 0x00, 0x00 ], --  ]
    [ 0x04, 0x02, 0x01, 0x02, 0x04 ], --  ^
    [ 0x40, 0x40, 0x40, 0x40, 0x40 ], --  _
    [ 0x00, 0x01, 0x02, 0x04, 0x00 ], --  `
    [ 0x20, 0x54, 0x54, 0x54, 0x78 ], --  a
    [ 0x7F, 0x48, 0x44, 0x44, 0x38 ], --  b
    [ 0x38, 0x44, 0x44, 0x44, 0x20 ], --  c
    [ 0x38, 0x44, 0x44, 0x48, 0x7F ], --  d
    [ 0x38, 0x54, 0x54, 0x54, 0x18 ], --  e
    [ 0x08, 0x7E, 0x09, 0x01, 0x02 ], --  f
    [ 0x08, 0x14, 0x54, 0x54, 0x3C ], --  g
    [ 0x7F, 0x08, 0x04, 0x04, 0x78 ], --  h
    [ 0x00, 0x44, 0x7D, 0x40, 0x00 ], --  i
    [ 0x20, 0x40, 0x44, 0x3D, 0x00 ], --  j
    [ 0x00, 0x7F, 0x10, 0x28, 0x44 ], --  k
    [ 0x00, 0x41, 0x7F, 0x40, 0x00 ], --  l
    [ 0x7C, 0x04, 0x18, 0x04, 0x78 ], --  m
    [ 0x7C, 0x08, 0x04, 0x04, 0x78 ], --  n
    [ 0x38, 0x44, 0x44, 0x44, 0x38 ], --  o
    [ 0x7C, 0x14, 0x14, 0x14, 0x08 ], --  p
    [ 0x08, 0x14, 0x14, 0x18, 0x7C ], --  q
    [ 0x7C, 0x08, 0x04, 0x04, 0x08 ], --  r
    [ 0x48, 0x54, 0x54, 0x54, 0x20 ], --  s
    [ 0x04, 0x3F, 0x44, 0x40, 0x20 ], --  t
    [ 0x3C, 0x40, 0x40, 0x20, 0x7C ], --  u
    [ 0x1C, 0x20, 0x40, 0x20, 0x1C ], --  v
    [ 0x3C, 0x40, 0x30, 0x40, 0x3C ], --  w
    [ 0x44, 0x28, 0x10, 0x28, 0x44 ], --  x
    [ 0x0C, 0x50, 0x50, 0x50, 0x3C ], --  y
    [ 0x44, 0x64, 0x54, 0x4C, 0x44 ], --  z
    [ 0x00, 0x08, 0x36, 0x41, 0x00 ], --  {
    [ 0x00, 0x00, 0x7F, 0x00, 0x00 ], --  |
    [ 0x00, 0x41, 0x36, 0x08, 0x00 ]  --  }
  ]

-- | Gets the bit representation ascii of a character.
getFontBitmap :: Char -> [[Int]] -> [Int]
getFontBitmap asciiElem fontBitmap
 | index >= 0 = fontBitmap !! index
 | otherwise = error"Soy Fabi"
   where index = ord asciiElem - 32

-- Changes bits for pixel graphic representation.
changeNotation :: [Int] -> [Char]
changeNotation bitArray = map changeNotation bitArray
 where changeNotation 0 = ' '
       changeNotation 1 = '*'

-- Changes bits list for pixel graphic representation list.
applyChangeNotation :: [[Int]] -> [[Char]]
applyChangeNotation bitArray  =  map changeNotation bitArray 

-- Gets the representation in pixels of a particular character of the alphabet.
font :: Char -> Pixels
font charElement = transpose(applyChangeNotation(applyToBinary(getFontBitmap charElement fontBitmap)))

-- Converts a value of type Pixel into string
pixelsToString :: Pixels -> [Char]
pixelsToString fontArray = concat fontArray

-- Joints to pixels list separated by "".
concatWithEmptyList :: Pixels -> Pixels -> Pixels
concatWithEmptyList pixelList1 pixelList2 = pixelList1 ++ [""] ++ pixelList2

-- Converts a pixels list into pixels.
pixelListToPixels :: [Pixels] -> Pixels
pixelListToPixels pixelString = foldl1 concatWithEmptyList pixelString

-- Converts a pixels list into string.
pixelListToString :: [Pixels] -> [Char]
pixelListToString pixelList = concat(map pixelsToString pixelList )

-- Receives a pixels list and produces a new pixels.
concatPixels :: [Pixels] -> Pixels
concatPixels pixelList = map concat(transpose pixelList)

-- Receives a string and produces a pixels list.
applyFont :: [Char] -> [Pixels]
applyFont string = map font string

-- Converts a string into pixels.
messageToPixels :: [Char] -> Pixels
messageToPixels string = map unwords (transpose (applyFont string))

-- Move one pixels row up.
up :: Pixels -> Pixels
up pixel = pixelTail ++ [pixelHead]
 where pixelTail = tail pixel
       pixelHead = head pixel

-- Move one pixels row down.
down :: Pixels -> Pixels
down pixel = pixelLast : pixelTail
 where pixelTail = init pixel
       pixelLast = last pixel

-- Move one pixels column to the right.
right :: Pixels -> Pixels
right pixel = map right' pixel
 where right' xs = tail xs ++ [head xs]

-- Move one pixels column to the left.
left :: Pixels -> Pixels
left pixel = map left' pixel
 where left' xs = last xs : init xs

--  Reverses the order of the rows.
upsideDown :: Pixels -> Pixels
upsideDown pixel = map reverse pixel

-- Reverses the order of the columns.
backwards :: Pixels -> Pixels
backwards pixel = transpose (map reverse (transpose pixel))

-- Swaps spaces by asterisks and vice versa.
changeAsterisks :: [Char] -> [Char]
changeAsterisks pixelString = map change pixelString
 where change '*' = ' '
       change ' ' = '*'

-- In a pixel swaps spaces by asterisks and vice versa.
negative :: Pixels -> Pixels
negative pixel = map changeAsterisks pixel
